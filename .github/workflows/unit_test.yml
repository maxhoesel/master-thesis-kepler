name: Makefile and Test

on:
  pull_request:
  push:
    branches:
      - "*"

jobs:
  unit_test_without_bcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@main
      with:
          go-version: 1.18
    - name: Get ginkgo
      run: make ginkgo-set
      env:
          GOPATH: /home/runner/go
          GOBIN: /home/runner/go/bin
    - name: Run 
      run: make test-verbose

  unit_test_with_bcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@main
      with:
          go-version: 1.18
    - name: Build bcc
      run: |
          set -x
          sudo apt-get update
          # Use release 9 of llvm etc. - later versions have an unfixed
          # bug on Ubuntu:
          # https://github.com/iovisor/bcc/issues/2915
          sudo apt-get -y install bison build-essential cmake flex git libelf-dev libfl-dev libedit-dev libllvm9 llvm-9-dev libclang-9-dev python zlib1g-dev
          pushd /tmp
          git clone --depth 1 --branch v0.20.0 https://github.com/iovisor/bcc.git
          mkdir -p bcc/build; cd bcc/build
          # Symlink /usr/lib/llvm to avoid "Unable to find clang libraries"
          # The directory appears only to be created when installing the
          # virtual llvm-dev package.
          # https://github.com/iovisor/bcc/issues/492
          sudo ln -s /usr/lib/llvm-9 /usr/local/llvm
          cmake ..
          make
          sudo make install
          popd
    - name: Get ginkgo
      run: make ginkgo-set
      env:
          GOPATH: /home/runner/go
          GOBIN: /home/runner/go/bin
    - name: Run 
      run: make test-verbose

  integration_test:
    runs-on: ubuntu-latest
    needs: unit_test_without_bcc
    strategy:
      matrix:
        kube_provider: [kind]
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-go@main
        with:
          go-version: 1.18
      - name: install kubectl
        run: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - name: build image locally
        run: export CTR_CMD=docker && make
      - name: infra up
        run: ./hack/integration_cluster.sh ${{matrix.kube_provider}}
      - name: deploy test
        run: kubectl create -f manifests/kubernetes/deployment.yaml 
      - name: checking
        run: until kubectl get svc --all-namespaces ; do date; sleep 1; echo ""; done  